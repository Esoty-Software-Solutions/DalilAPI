openapi: 3.0.0
x-stoplight:
  id: v0r49t68fw391
info:
  title: Main Document
  version: '1.0'
  description: API for creating and updating information about accounts
  license:
    name: TBD
servers:
  - url: 'http://localhost:3000/v1'
paths:
  /login:      
    parameters: []
    post:
      tags: [users]      
      summary: login
      operationId: post-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                  token:
                    type: string
                  data:
                    $ref: ../models/beneficiary.yaml
                required:
                  - statusCode
                  - message
                  - token
                  - data
              examples: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                required:
                  - statusCode
                  - message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                deviceToken:
                  type: string
                deviceType:
                  type: string
                  enum: [android, ios, browser]
              required:
                - username
                - password
            examples:
              Example 1:
                value:
                  username: user name
                  password: password hash
      description: user login
      parameters: []
  /logout:
    parameters: []
    post:
      tags: [users]
      summary: logout
      operationId: post-logout
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      description: user logout
  /users:
    get:      
      summary: List all users
      tags: [users]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    required:
                      - objectCount
                      - hasMore
                      - objectArray
                    properties:
                      objectCount:
                        type: integer
                      hasMore:
                        type: boolean
                      objectArray:
                        type: array
                        items:
                          $ref: ../models/user.yaml
                required:
                  - statusCode
                  - message
                  - data
              examples: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                required:
                  - statusCode
                  - message
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                required:
                  - statusCode
                  - message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                required:
                  - statusCode
                  - message
      operationId: get-users
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
    post:
      summary: Create a new user
      tags: [users]
      operationId: post-users
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                  date:
                    $ref: ../models/user.yaml
              examples: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/user-new.yaml
        description: ''
      description: ''
  /users/{userId}:
    get:
      summary: Get user information
      tags: [users]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: ../models/user.yaml
                required:
                  - statusCode
                  - message
                  - data
              examples: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                required:
                  - statusCode
                  - message
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                required:
                  - statusCode
                  - message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  messageBody:
                    type: string
                required:
                  - statusCode
                  - messageBody
      operationId: get-users-username
      parameters: []
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
  /beneficiaries:
    get:
      summary: List all beneficiaries
      tags: [beneficiaries]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                  date:
                    type: object
                    required:
                      - objectCount
                      - hasMore
                      - objectArray
                    properties:
                      objectCount:
                        type: integer
                      hasMore:
                        type: boolean
                      objectArray:
                        type: array
                        items:
                          $ref: ../models/beneficiary.yaml
                required:
                  - codeStatus
                  - message
                  - date
              examples: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
      operationId: get-beneficiaries
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
        - schema:
            type: string
          in: query
          name: instituionId
          description: A string used to retrieve beneficiaries associated with the indicated institution by providing the institution  ID
    post:
      summary: Create a new beneficiary
      tags: [beneficiaries]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: ../models/beneficiary.yaml
                required:
                  - codeStatus
                  - message
                  - data
              examples: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
      operationId: post-beneficiaries
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/beneficiary-new.yaml
        description: ''
    parameters: []
  /beneficiaries/{beneficiaryId}:
    get:
      summary: Get beneficiary Information by ID
      tags: [beneficiaries]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: ../models/beneficiary.yaml
                required:
                  - codeStatus
                  - message
                  - data
              examples: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
      operationId: get-beneficiaries-beneficiaryId
      description: Get information about the user
      parameters: []
    parameters:
      - schema:
          type: string
        name: beneficiaryId
        in: path
        required: true
    post:
      tags: [beneficiaries]
      summary: ''
      operationId: post-users-userId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: ../models/beneficiary.yaml
                required:
                  - codeStatus
                  - message
                  - data
    patch:
      tags: [beneficiaries]
      summary: ''
      operationId: patch-users-userId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: ../models/beneficiary.yaml
                required:
                  - codeStatus
                  - message
                  - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/beneficiary-update.yaml
            examples:
              Example 1:
                value:
                  firstName: string
                  middleName: string
                  lastName: string
                  birthdate: string
                  phoneNumber: string
                  gender: string
                  familyMembers:
                    - familyMemberId: string
                      firstName: string
                      middleName: string
                      lastName: string
                      birthdate: '2019-08-24'
                      relationshipToBeneficiary: Father
                      gender: string
                    - familyMemberId: string
                      firstName: string
                      middleName: string
                      lastName: string
                      birthdate: '2019-08-24'
                      relationshipToBeneficiary: Father
                      gender: string
                  institutionId: string
                  residentCity: string
                  residentDistrict: string
                  account:
                    hasAccount: true
                    userId: string
  /beneficiaries/{beneficiaryId}/expenseReports:
    parameters:
      - schema:
          type: string
        name: beneficiaryId
        in: path
        required: true
    get:
      summary: Get expense reports
      tags: [beneficiaries]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                  date:
                    type: object
                    required:
                      - objectCount
                      - hasMore
                      - objectArray
                    properties:
                      objectCount:
                        type: integer
                      hasMore:
                        type: boolean
                      objectArray:
                        type: array
                        items:
                          $ref: ../models/expenseReport.yaml
                required:
                  - codeStatus
                  - message
                  - date
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-beneficiaries-beneficiaryId-expenseReports
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
    post:
      summary: Add expense report
      tags: [beneficiaries]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../models/expenseReport.yaml
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: post-beneficiaries-beneficiaryId-expenseReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/expenseReport-new.yaml
            examples:
              Example 1:
                value:
                  healtcareCenterId: string
                  healtcareCenterName: string
                  serviceDate: '2019-08-24'
                  charnge: 0
                  currency: string
                  beneficiaryId: string
                  patientName: string
  /beneficiaries/{beneficiaryId}/medicalFiles:
    parameters:
      - schema:
          type: string
        name: beneficiaryId
        in: path
        required: true
    get:
      summary: Get medical files
      tags: [beneficiaries, medicalFiles]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    required:
                      - objectCount
                      - hasMore
                      - objectArray
                    properties:
                      objectCount:
                        type: integer
                      hasMore:
                        type: boolean
                      objectArray:
                        type: array
                        items:
                          $ref: ../models/medicalFile.yaml
                required:
                  - statusCode
                  - message
                  - data
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-beneficiaries-beneficiaryId-medicalFiles
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
  
  
  /beneficiaries/claims:
    parameters: []
    get:
      summary: Get all claims from all beneficiary
      tags: [beneficiaries, claims]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                  date:
                    type: object
                    required:
                      - objectCount
                      - hasMore
                      - objectArray
                    properties:
                      objectCount:
                        type: integer
                      hasMore:
                        type: boolean
                      objectArray:
                        type: array
                        items:
                          $ref: ../models/manualClaims.yaml
                required:
                  - codeStatus
                  - message
                  - date
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-beneficiaries-claims
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      description: ''
  /beneficiaries/{beneficiaryId}/claims:
    parameters:
      - schema:
          type: string
        name: beneficiaryId
        in: path
        required: true
    get:
      summary: Get all claims from beneficiary
      tags: [beneficiaries, claims]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      objectCount:
                        type: integer
                      hasMore:
                        type: boolean
                      object:
                        type: array
                        items:
                          $ref: ../models/manualClaims.yaml
                    required:
                      - object
                      - objectCount
                      - hasMore
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-beneficiaries-beneficiaryId-claims
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
    post:
      summary: submit a claim
      tags: [beneficiaries, claims]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../models/manualClaims.yaml
              examples: {}
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: post-beneficiaries-beneficiaryId-claims
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                description:
                  $ref: ../models/manualClaims-new.yaml
                file1:
                  type: string
                  format: binary
                file2:
                  type: string
                  format: binary
                file3:
                  type: string
                  format: binary
                file4:
                  type: string
                  format: binary
              required:
                - description
        description: ''
  /beneficiaries/{beneficiaryId}/benefitPolicies:
    parameters:
      - schema:
          type: string
        name: beneficiaryId
        in: path
        required: true
    get:
      summary: Get benefit policy information
      tags: [beneficiaries]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: ../models/insurancePolicy.yaml
                required:
                  - statusCode
                  - message
                  - data
              examples: {}
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-beneficiaries-beneficiaryId-benefitPolicies

  /appointments:
    get:
      summary: List all appointments
      tags: [bookings]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    required:
                      - objectCount
                      - hasMore
                      - objectArray
                    properties:
                      objectCount:
                        type: integer
                      hasMore:
                        type: boolean
                      objectArray:
                        type: array
                        items:
                          $ref: ../models/appointment.yaml
                required:
                  - statusCode
                  - message
                  - data
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-appointments
      parameters:
        - $ref: '#/components/parameters/pending'
        - $ref: '#/components/parameters/booked'
        - $ref: '#/components/parameters/completed'
        - $ref: '#/components/parameters/cancelled'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/fromDate'
        - $ref: '#/components/parameters/toDate'
        - $ref: '#/components/parameters/rejected'
        - $ref: '#/components/parameters/medicalCenterId'
  /appointments/{appointmentId}:
    parameters:
      - schema:
          type: string
        name: appointmentId
        in: path
        required: true
    post:
      summary: update appointment
      tags: [bookings]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: ../models/appointment.yaml
                required:
                  - statusCode
                  - message
                  - data
    patch:
      summary: update appointment
      tags: [bookings]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: ../models/appointment.yaml
                required:
                  - statusCode
                  - message
                  - data
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: patch-appointments-appointmentId
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                appointmentStatus:
                  type: string
              required:
                - appointmentStatus
  '/appointments/users/{userId}':
    post:
      tags: [bookings, users]
      summary: request an appointment
      operationId: post-appointments
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                  date:
                    $ref: ../models/appointment.yaml
                required:
                  - codeStatus
                  - message
                  - date
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/appointment-new.yaml
        description: ''
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      tags: [bookings, users]
      summary: List all appointments for user
      operationId: get-appointments-users-userId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    required:
                      - objectCount
                      - hasMore
                      - objectArray
                    properties:
                      objectCount:
                        type: integer
                      hasMore:
                        type: boolean
                      objectArray:
                        type: array
                        items:
                          $ref: ../models/appointment.yaml
                required:
                  - codeStatus
                  - message
                  - data
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
      parameters:
        - $ref: '#/components/parameters/booked'
        - $ref: '#/components/parameters/pending'
        - $ref: '#/components/parameters/completed'
        - $ref: '#/components/parameters/cancelled'
        - $ref: '#/components/parameters/rejected'
      x-internal: false
      description: ''

  /medicalCenters:
    get:
      summary: List medical
      tags: [medicalCenters]
      operationId: get-medicalCenters
      description: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: array
                    items:
                      $ref: ../models/medicalCenter.yaml
                  objectCount:
                    type: integer
                  hasMore:
                    type: boolean
                    description: Indication if there are more objects to retreive
                required:
                  - object
                  - objectCount
                  - hasMore
              examples: {}
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/city'
    post:
      tags: [medicalCenters]
      summary: create a medical center
      operationId: post-medicalCenters
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../models/medicalCenter.yaml
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
              schema:
                $ref: ../models/medicalCenter-new.yaml
          multipart/form-data:
            schema:
              $ref: ../models/medicalCenter-new.yaml                  
                
                
  '/medicalCenters/{medicalCenterId}':
    parameters:
      - schema:
          type: string
        name: medicalCenterId
        in: path
        required: true
    get:
      tags: [medicalCenters]
      summary: Get medical center
      operationId: get-medicalCenters-medicalCenterId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/medicalCenter.yaml
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      tags: [medicalCenters]
      summary: Get medical center object
      operationId: post-medicalCenters-medicalCenterId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/medicalCenter.yaml
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/medicalCenter-update.yaml
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              $ref: ../models/medicalCenter.yaml
        description: ''
    delete:
      tags: [medicalCenters]
      summary: ''
      operationId: delete-medicalCenters-medicalCenterId
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

  /medicalCenters/claims:
    get:
      summary: Get all claims from medical centers
      tags: [medicalCenters, claims]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: array
                    items:
                      $ref: ../models/medicalCenterClaims.yaml
                  objectCount:
                    type: integer
                  hasMore:
                    type: boolean
                  PendingClaimsCount:
                    type: integer
                  ApprovedClaimsCount:
                    type: integer
                  rejectedClaimsCount:
                    type: integer
                  revisedClaimsCount:
                    type: integer
                required:
                  - object
                  - objectCount
                  - hasMore
                  - PendingClaimsCount
                  - ApprovedClaimsCount
                  - rejectedClaimsCount
                  - revisedClaimsCount
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-medicalCenters-claims
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/medicalCenterId'
        - $ref: '#/components/parameters/institutionId'
        - schema:
            type: boolean
          in: query
          name: approvedClaims
          description: get approved claims
        - schema:
            type: boolean
          in: query
          name: pendingClaims
          description: get pending claims
        - schema:
            type: boolean
          in: query
          name: rejectedClaims
          description: get rejected claims
        - schema:
            type: boolean
          in: query
          name: revisedClaims
          description: get revised claims
        - schema:
            type: string
          in: query
          name: fromDate
        - schema:
            type: string
          in: query
          name: toDate
  /medicalCenters/claims/{claimId}:
    parameters:
      - schema:
          type: string
        name: claimId
        in: path
        required: true
    patch:
      summary: Update claim information
      tags: [medicalCenters, claims]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/medicalCenterClaims.yaml
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: patch-medicalCenters-claims-claimId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/medicalCenterClaims-update.yaml

  /schedules:
    get:
      summary: List schedules
      tags: [bookings]
      operationId: get-schedules
      parameters:
        - schema:
            type: string
          in: query
          name: city
          required: true
        - $ref: '#/components/parameters/specialty'
        - schema:
            type: string
            enum: ["morning", "afternoon", "evening"]
          in: query
          name: timeSlot
        - schema:
            type: string
            format: YYYY-MM-DD
          in: query
          name: fromDate
          required: true
        - schema:
            type: string
            format: YYYY-MM-DD
          in: query
          name: toDate
          required: true          
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/doctorId'
        - $ref: '#/components/parameters/medicalCenterId'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/groupBy'
      description: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                    codeStatus:
                      type: string
                    message:
                      type: string
                    data:
                      type: object
                      required:
                        - objectCount
                        - hasMore
                        - objectArray
                      properties:
                        objectCount:
                          type: integer
                        hasMore:
                          type: boolean
                        objectArray:
                          type: array
                          items:                              
                            oneOf:
                              - $ref: ../models/schedule.yaml
                              - $ref: ../models/scheduleMedicalCenter.yaml
                              - $ref: ../models/scheduleDoctor.yaml
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
    parameters: []
    post:
      tags: [bookings]
      summary: Create a new schedule
      operationId: post-schedules
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../models/schedule.yaml
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/schedule-new.yaml
            examples: {}
      parameters: []
  '/schedules/{scheduleId}':
    post:
      tags: [bookings]
      summary: Update schedule
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/schedule.yaml
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: patch-schedules-scheduleId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/schedule-update.yaml
    get:
      summary: Get schedule by ID
      tags: [bookings]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/schedule.yaml
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-schedules-scheduleId
      parameters: []
    delete:
      summary: Delete schedule
      tags: [bookings]
      operationId: delete-schedules-scheduleId
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    parameters:
      - schema:
          type: string
        name: scheduleId
        in: path
        required: true

  /doctors:
    post:
      summary: Create a new doctor
      tags: [doctors]
      operationId: post-doctors
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/doctor-new.yaml
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../models/doctor.yaml
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    get:
      summary: List doctors
      tags: [doctors]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: array
                    items:
                      $ref: ../models/doctor.yaml
                  objectCount:
                    type: integer
                  hasMore:
                    type: boolean
                required:
                  - object
                  - objectCount
                  - hasMore
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-doctors
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/specialty'
  /doctors/{doctorId}:
    get:
      summary: Get doctor by ID
      tags: [doctors]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/doctor.yaml
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-doctors-doctorId
      parameters: []
    parameters:
      - schema:
          type: string
        name: doctorId
        in: path
        required: true
    patch:
      tags: [doctors]
      summary: ''
      operationId: patch-doctors-doctorId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/doctor.yaml
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/doctor-update.yaml
    delete:
      tags: [doctors]
      summary: ''
      operationId: delete-doctors-doctorId
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

  /cities:
    get:
      summary: List cities
      tags: [miscellaneous]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    required:
                      - objectCount
                      - objectArray
                    properties:
                      objectCount:
                        type: integer
                      objectArray:
                        type: array
                        items:
                          type: object
                          properties:
                            cityName:
                              type: string
                          required:
                            - cityName
                required:
                  - codeStatus
                  - message
                  - data
              examples: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
      operationId: get-cities
    post:
      tags: [miscellaneous]
      summary: Add a city
      operationId: post-cities
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    required:
                      - cityName
                    properties:
                      cityName:
                        type: string
                required:
                  - codeStatus
                  - message
                  - data
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                cityName:
                  type: string
              required:
                - cityName
  /medicalSpecialties:
    get:
      tags: [miscellaneous]
      summary: List medical specialties
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    required:
                      - objectCount
                      - objectArray
                    properties:
                      objectCount:
                        type: integer
                      objectArray:
                        type: array
                        items:
                          type: object
                          properties:
                            medicalSpecialtyName:
                              type: string
                          required:
                            - medicalSpecialtyName
                required:
                  - codeStatus
                  - message
                  - data
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
      operationId: get-medicalSpecialties
    post:
      summary: Add a medical specialty
      tags: [miscellaneous]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    required:
                      - medicalSpecialtyName
                    properties:
                      medicalSpecialtyName:
                        type: string
                required:
                  - codeStatus
                  - message
                  - data
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                required:
                  - codeStatus
                  - message
      operationId: post-medicalSpecialties
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                specialtyName:
                  type: string
              required:
                - specialtyName
    parameters: []
  /medicalServices:
    get:
      summary: Get medical Services
      tags: [miscellaneous]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  objectCount:
                    type: integer
                  hasMore:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        objectCount:
                          type: integer
                        objectArray:
                          type: array
                          items:
                            type: object
                            properties:
                              medicaServiceName:
                                type: string
                            required:
                              - medicaServiceName
                      required:
                        - objectCount
                        - objectArray
                required:
                  - objectCount
                  - hasMore
                  - data
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-medicalServices
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      description: ''
    post:
      summary: Add medical service
      tags: [miscellaneous]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  serviceName:
                    type: string
                required:
                  - serviceName
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: post-medicalServices
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                serviceName:
                  type: string
              required:
                - serviceName

  /institutions:
    get:
      summary: Get all institution
      tags: [institutions]
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-institutions
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                object:
                  type: array
                  items:
                    $ref: ../models/institutions.yaml
                objectCounts:
                  type: integer
                hasMore:
                  type: boolean
              required:
                - object
                - objectCounts
                - hasMore
    post:
      summary: Create an institution
      tags: [institutions]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../models/institutions.yaml
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: post-institutions
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/institutions-new.yaml
  /institutions/{institutionId}:
    parameters:
      - schema:
          type: string
        name: institutionId
        in: path
        required: true
    patch:
      summary: Update institution
      tags: [institutions]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/institutions.yaml
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: patch-institutions-institutionId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/institutions-update.yaml
    get:
      tags: [institutions]
      summary: ''
      operationId: get-institutions-institutionId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/institutions.yaml
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error


components:
  schemas: {}
  examples: {}
  responses: {}
  securitySchemes:
    'Authorization: Basic ZGVtbzpwQDU1dzByZA==':
      type: http
      scheme: basic
      description: ''
  requestBodies: {}
  parameters:
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
      description: 'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 30'
    starting_after_object:
      name: starting_after_object
      in: query
      required: false
      schema:
        type: string
      description: 'A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.'
    skip:
      name: skip
      in: query
      required: false
      schema:
        type: integer
      description: 'Skip a number of objects. Used for pagination'
    doctorId:
      name: doctorId
      in: query
      required: false
      schema:
        type: string
      description: doctor ID
    medicalCenterId:
      name: medicalCenterId
      in: query
      required: false
      schema:
        type: string
      description: medical center ID
    pending:
      name: pending
      in: query
      required: false
      schema:
        type: boolean
      description: Flag to retrieve pending appointments. Default value is true
    booked:
      name: booked
      in: query
      required: false
      schema:
        type: boolean
      description: Flag to retrieve booked appointments. Default value is true
    completed:
      name: completed
      in: query
      required: false
      schema:
        type: boolean
      description: Flag to retrieve completed appointments. Default value is true
    cancelled:
      name: cancelled
      in: query
      required: false
      schema:
        type: boolean
      description: Flag to retrieve cancelled appointments. Default value is true
    fromDate:
      name: fromDate
      in: query
      required: false
      schema:
        type: string
        format: date
      description: retrieve objects associated with a date on or after this date
    toDate:
      name: toDate
      in: query
      schema:
        type: string
        format: date
      description: Retrieve objects associated with a date on or before this date
    sortBy:
      name: sortBy
      in: query
      required: false
      schema:
        type: string
        enum:
          - doctor
          - medicalCenter
      description: 'Flag to sort the objects by either doctor, medical centers or objectId. Default will be to sort by object id'
    groupBy:
      name: groupBy
      in: query
      required: false
      schema:
        type: string
        enum:
          - doctor
          - medicalCenter
      description: 'Flag to group the objects by either doctor or medical centers'
    rejected:
      name: rejected
      in: query
      required: false
      schema:
        type: boolean
      description: Flag to retrieve rejected appointments. Default value is true
    specialty:
      name: specialty
      in: query
      required: false
      schema:
        type: string
      description: filter for doctor's specialty
    institutionId:
      name: institutionId
      in: query
      required: false
      schema:
        type: string
      description: institution Id
    city:
      name: city
      in: query
      required: false
      schema:
        type: string
      description: filter parameter to indicated city
    searchQuery:
      name: searchQuery
      in: query
      required: false
      schema:
        type: string
      description: filter string parameters like name and ID
