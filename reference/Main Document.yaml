openapi: '3.0.9'
x-stoplight:
  id: v0r49t68fw391
info:
  title: Main Document
  version: '1.5'
  description: API for creating and updating information about accounts
  license:
    name: TBD
servers:
  - url: 'http://dalildev.esoty.ca/v1'
paths:
  /TestPushNotification:      
    parameters: []
    post:
      tags: [devices]      
      summary: Test Push notification
      operationId: post-TestPushNotification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceToken:
                  type: string
                deviceType:
                  type: string
                  enum: [android, ios, browser]
                payload:
                  type: object
                  properties:
                    title:
                      type: string
                      description: title of the notification
                    body:
                      type: string
                      description: body of the notification
                    clickAction:
                      type: string
                      description: action to be taken when the notification is clicked
                    iconURL:
                      type: string
                      description: icon to be displayed with the notification                    
                    data:
                      type: object
                      description: JSON data to be sent with the notification
              required:
                - title
                - body

                    
      description: user login      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      token:
                        type: string
                      data:
                        $ref: ../models/user.yaml
                    required:
                      - token
                      - data


  /login:      
    parameters: []
    post:
      tags: [users]      
      summary: login
      operationId: post-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      token:
                        type: string
                      data:
                        $ref: ../models/user.yaml
                    required:
                      - token
                      - data
                
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
                deviceToken:
                  type: string
                deviceType:
                  type: string
                  enum: [android, ios, browser]
              required:
                - username
                - password
      description: user login
      parameters: []

  /users:
    get:      
      summary: List all users
      tags: [users]
      operationId: get-users
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: ../models/user.yaml
                required:
                  - data
    post:
      summary: Create a new user
      tags: [users]
      operationId: post-users
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/user.yaml
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/user.yaml
                    required:
                      - data
  
  /users/{userId}/logout:
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      tags: [users]
      summary: logout
      operationId: post-logout
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/standardResponse.yaml
      description: user logout
    

  /users/{userId}:
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Get user information
      tags: [users]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/user.yaml
                    required:
                      - data
      operationId: get-users-userId
    patch:
      summary: update user information
      tags: [users]
      operationId: patch-users-userId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/user.yaml      
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/user.yaml
                    required:
                      - data
    
  /users/{userId}/deviceTokens:
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      tags: [users]
      summary: update device token for user
      description: update device token for user
      operationId: post-users-userId-deviceToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceToken:
                  type: string
                deviceType:
                  type: string
                  enum: [android, ios, browser]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/standardResponse.yaml
  
  /users/{userId}/changePassword:  
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      operationId: post-users-userId-changePassword
      summary: change user password
      tags: [users]
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/changePassword.yaml      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/standardResponse.yaml

  
  /subscribers:
    get:
      summary: List all subscribers
      tags: [subscribers]
      operationId: get-subscribers
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
        - schema:
            type: string
          in: query
          name: institutionId
          description: A string used to retrieve subscribers associated with the indicated institution by providing the institution  ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: ../models/subscriber.yaml#/components/schemas/read
                required:
                  - data


    post:
      operationId: post-subscribers
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/subscriber.yaml#/components/schemas/write
        description: ''    
      summary: Create a new subscriber
      tags: [subscribers]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/subscriber.yaml#/components/schemas/read
                    required:
                      - data


  /subscribers/{subscriberId}:
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true  
    get:
      operationId: get-subscribers-subscriberId
      description: Get information about the subscriber
      parameters: []  
      summary: Get subscriber Information by ID
      tags: [subscribers]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/subscriber.yaml#/components/schemas/read
                    required:
                      - data

    patch:
      tags: [subscribers]
      summary: ''
      operationId: patch-subscribers-subscriberId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/subscriber.yaml#/components/schemas/update
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/subscriber.yaml#/components/schemas/read
                    required:
                      - data


  /subscribers/{subscriberId}/beneficiaries:
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true
    get:
      summary: Get beneficiaries of a subscriber
      tags: [subscribers, beneficiaries]
      operationId: get-subscribers-subscriberId-beneficiaries
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: ../models/beneficiary.yaml
                    required:
                      - data

    post:
      summary: Add a beneficiary for a subscriber      
      description: ''
      tags: [subscribers, beneficiaries]
      operationId: post-subscribers-subscriberId-beneficiaries
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/beneficiary.yaml
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/beneficiary.yaml
                    required:
                      - data


  /subscribers/{subscriberId}/beneficiaries/{beneficiaryId}:
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true
      - schema:
          type: string
        name: beneficiaryId
        in: path
        required: true        
    get:
      summary: Get a beneficiary information
      tags: [subscribers, beneficiaries]
      operationId: get-subscribers-subscriberId-beneficiaries-beneficiaryId
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/beneficiary.yaml
                    required:
                      - data

    patch:
      summary: update a beneficiary information 
      description: ''
      tags: [subscribers, beneficiaries]
      operationId: post-subscribers-subscriberId-beneficiaries-beneficiaryId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/beneficiary.yaml
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/beneficiary.yaml
                    required:
                      - data

  /subscribers/{subscriberId}/beneficiaries/{beneficiaryId}/medicalFiles:
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true
      - schema:
          type: string
        name: beneficiaryId
        in: path
        required: true   
    get:
      summary: Get medical file for beneficiary
      tags: [medicalFiles]
      operationId: get-subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/medicalFile.yaml
                    required:
                      - data
    patch:
      tags: [medicalFiles]
      summary: ''
      operationId: patch-subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/medicalFile.yaml
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/medicalFile.yaml
                    required:
                      - data

   
  /subscribers/{subscriberId}/beneficiaries/{beneficiaryId}/medicalFiles/clinicalVisits:
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true
      - schema:
          type: string
        name: beneficiaryId
        in: path
        required: true   
    get:
      summary: Get clinicalVisits of medical file
      tags: [medicalFiles]
      operationId: get-subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-clinicalVisits
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: ../models/clinicalVisit.yaml
                    required:
                      - data
    post:
      operationId: post--subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-clinicalVisits
      summary: Create clinicalVisit document for medical file
      tags: [medicalFiles]
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: ../models/clinicalVisit.yaml
                - type: object
                  properties:
                    file:
                      type: string
                      format: binary      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/clinicalVisit.yaml
                    required:
                      - data
 
  /subscribers/{subscriberId}/beneficiaries/{beneficiaryId}/medicalFiles/allergies:
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true
      - schema:
          type: string
        name: beneficiaryId
        in: path
        required: true   
    get:
      summary: Get allergies of medical file
      tags: [medicalFiles]
      operationId: get-subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-allergies
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: ../models/allergy.yaml
                    required:
                      - data
    post:
      operationId: post--subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-allergies
      summary: Create allergy document for medical file
      tags: [medicalFiles]
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: ../models/allergy.yaml
                - type: object
                  properties:
                    file:
                      type: string
                      format: binary      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/allergy.yaml
                    required:
                      - data

  /subscribers/{subscriberId}/beneficiaries/{beneficiaryId}/medicalFiles/surgeryHistories:
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true
      - schema:
          type: string
        name: beneficiaryId
        in: path
        required: true   
    get:
      summary: Get surgeryHistories of medical file
      tags: [medicalFiles]
      operationId: get-subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-surgeryHistories
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: ../models/surgeryHistory.yaml
                    required:
                      - data
    post:
      operationId: post--subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-surgeryHistories
      summary: Create surgeryHistory document for medical file
      tags: [medicalFiles]
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: ../models/surgeryHistory.yaml
                - type: object
                  properties:
                    file:
                      type: string
                      format: binary      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/surgeryHistory.yaml
                    required:
                      - data

  /subscribers/{subscriberId}/beneficiaries/{beneficiaryId}/medicalFiles/chronicDiseases:
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true
      - schema:
          type: string
        name: beneficiaryId
        in: path
        required: true   
    get:
      summary: Get chronicDiseases of medical file
      tags: [medicalFiles]
      operationId: get-subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-chronicDiseases
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: ../models/chronicDisease.yaml
                    required:
                      - data
    post:
      operationId: post--subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-chronicDiseases
      summary: Create chronicDisease document for medical file
      tags: [medicalFiles]
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: ../models/chronicDisease.yaml
                - type: object
                  properties:
                    file:
                      type: string
                      format: binary      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/chronicDisease.yaml
                    required:
                      - data

  /subscribers/{subscriberId}/beneficiaries/{beneficiaryId}/medicalFiles/medicalTests:
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true
      - schema:
          type: string
        name: beneficiaryId
        in: path
        required: true   
    get:
      summary: Get medicalTests of medical file
      tags: [medicalFiles]
      operationId: get-subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-medicalTests
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: ../models/medicalTest.yaml
                    required:
                      - data
    post:
      operationId: post--subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-medicalTests
      summary: Create medicalTest document for medical file
      tags: [medicalFiles]
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: ../models/medicalTest.yaml
                - type: object
                  properties:
                    file:
                      type: string
                      format: binary      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/medicalTest.yaml
                    required:
                      - data

  /appointments:
    get:
      summary: List all appointments
      tags: [bookings]
      operationId: get-appointments
      parameters:
        - $ref: '#/components/parameters/appointmentStatusId'
        - $ref: '#/components/parameters/dateRange'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/medicalCenterId'
        - $ref: '#/components/parameters/doctorId'
        - $ref: '#/components/parameters/cityId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    required:
                      - objectCount
                      - objectArray
                    properties:
                      objectCount:
                        type: integer
                      objectArray:
                        type: array
                        items:
                          $ref: ../models/appointment.yaml#/components/schemas/read
                required:
                  - statusCode
                  - message
                  - data

  
  /appointments/{appointmentId}:
    parameters:
      - schema:
          type: string
        name: appointmentId
        in: path
        required: true
    get:
      summary: get an appointment
      tags: [bookings]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: ../models/appointment.yaml#/components/schemas/read
                required:
                  - statusCode
                  - message
                  - data
    patch:
      summary: update an appointment status
      tags: [bookings]
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/appointment.yaml#/components/schemas/update
        description: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: ../models/appointment.yaml#/components/schemas/read
                required:
                  - statusCode
                  - message
                  - data
      operationId: patch-appointments-appointmentId
      description: ''

  /subscribers/{subscriberId}/appointments:
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true
    post:
      tags: [bookings] 
      summary: request an appointment
      operationId: post-subscribers-subscriberId-appointments
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/appointment.yaml#/components/schemas/write
        description: ''
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: ../models/appointment.yaml#/components/schemas/write
                required:
                  - codeStatus
                  - message
                  - data

    get:
      tags: [bookings]
      summary: List all appointments for user
      operationId: get-subscribers-subscriberId-appointments
      parameters:
        - $ref: '#/components/parameters/appointmentStatusId'
        - $ref: '#/components/parameters/dateRange'      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: ../models/appointment.yaml#/components/schemas/read

  /medicalCenters:
    get:
      summary: List medical
      tags: [medicalCenters]
      operationId: get-medicalCenters
      description: ''
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/cityId'
        - $ref: '#/components/parameters/medicalSpecialtyId'  
        - $ref: '#/components/parameters/medicalCenterId'
        - $ref: '#/components/parameters/doctorId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: ../models/medicalCenter.yaml
    post:
      tags: [medicalCenters]
      summary: create a medical center
      operationId: post-medicalCenters
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: ../models/medicalCenter.yaml
                - type: object
                  properties:
                    file:
                      type: array
                      items:
                        type: string
                        format: binary
                      maxItems: 4  
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/medicalCenter.yaml
                    required:
                      - data
             
                
                
  /medicalCenters/{medicalCenterId}:
    parameters:
      - schema:
          type: string
        name: medicalCenterId
        in: path
        required: true
    get:
      tags: [medicalCenters]
      summary: Get medical center
      operationId: get-medicalCenters-medicalCenterId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/medicalCenter.yaml
                    required:
                      - data
    patch:
      tags: [medicalCenters]
      summary: Get medical center object
      operationId: patch-medicalCenters-medicalCenterId
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: ../models/medicalCenter.yaml
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/medicalCenter.yaml
                    required:
                      - data

    delete:
      tags: [medicalCenters]
      summary: ''
      operationId: delete-medicalCenters-medicalCenterId
      responses:
        '204':
          description: Deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/medicalCenter.yaml
                    required:
                      - data

  /schedules:
    get:
      summary: List schedules
      tags: [bookings]
      operationId: get-schedules
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/timeSlotId'
        - $ref: '#/components/parameters/dateRange'
        - $ref: '#/components/parameters/cityId'
        - $ref: '#/components/parameters/medicalSpecialtyId'  
        - $ref: '#/components/parameters/medicalCenterId'
        - $ref: '#/components/parameters/doctorId'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/groupBy'
        
      description: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                    codeStatus:
                      type: string
                    message:
                      type: string
                    data:
                      type: object
                      required:
                        - objectCount
                        - hasMore
                        - objectArray
                      properties:
                        objectCount:
                          type: integer
                        objectArray:
                          type: array
                          description: Different response based on the sortBy and groupBy query parameters
                          items:                              
                            oneOf:
                              - $ref: ../models/schedule.yaml#/components/schemas/read
                              - $ref: ../models/scheduleMedicalCenter.yaml
                              - $ref: ../models/scheduleDoctor.yaml
    post:
      tags: [bookings]
      summary: Create a new schedule
      operationId: post-schedules
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/schedule.yaml#/components/schemas/write
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../models/schedule.yaml#/components/schemas/read



  /schedules/{scheduleId}:
    parameters:
      - schema:
          type: string
        name: scheduleId
        in: path
        required: true
    patch:
      tags: [bookings]
      summary: Update schedule
      operationId: patch-schedules-scheduleId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/schedule.yaml#/components/schemas/write
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/schedule.yaml#/components/schemas/read
                    required:
                      - data

    get:
      summary: Get schedule by ID
      tags: [bookings]
      operationId: get-schedules-scheduleId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/schedule.yaml#/components/schemas/read
                    required:
                      - data

    delete:
      summary: Delete schedule
      tags: [bookings]
      operationId: delete-schedules-scheduleId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/standardResponse.yaml
        
  /doctors:
    post:
      summary: Create a new doctor
      tags: [doctors]
      operationId: post-doctors
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/doctor.yaml
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/doctor.yaml
                    required:
                      - data
    get:
      summary: List doctors
      tags: [doctors]
      operationId: get-doctors
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/cityId'
        - $ref: '#/components/parameters/medicalSpecialtyId'  
        - $ref: '#/components/parameters/medicalCenterId'
        - $ref: '#/components/parameters/doctorId'
      description: Specifying medicalCenterId, medicalSpecialtyId, or cityId will return doctors with schedules associated with those parameters.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: array
                    items:
                      $ref: ../models/doctor.yaml
                  objectCount:
                    type: integer
                required:
                  - object
                  - objectCount
                  - hasMore
        
  /doctors/{doctorId}:
    parameters:
      - schema:
          type: string
        name: doctorId
        in: path
        required: true  
    get:
      summary: Get doctor by ID
      tags: [doctors]
      operationId: get-doctors-doctorId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/doctor.yaml
                    required:
                      - data

    patch:
      tags: [doctors]
      summary: ''
      operationId: patch-doctors-doctorId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/doctor.yaml
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/doctor.yaml
                    required:
                      - data

    delete:
      tags: [doctors]
      summary: ''
      operationId: delete-doctors-doctorId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/standardResponse.yaml

  /misc/cities:
    get:
      summary: List cities
      tags: [miscellaneous]
      operationId: get-cities
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: ../models/enumList.yaml

    post:
      tags: [miscellaneous]
      summary: Add a city
      operationId: post-cities
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/enumList.yaml      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data

  /misc/cities/{cityId}:
    get:
      summary: get a city
      tags: [miscellaneous]
      operationId: get-cities-cityId
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data 
    patch:
      tags: [miscellaneous]
      summary: update a city
      operationId: patch-cities-cityId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/enumList.yaml      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data 

  /misc/medicalSpecialties:
    get:
      summary: List medicalSpecialties
      tags: [miscellaneous]
      operationId: get-medicalSpecialties
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/cityId'
        - $ref: '#/components/parameters/medicalSpecialtyId'  
        - $ref: '#/components/parameters/medicalCenterId'
        - $ref: '#/components/parameters/doctorId'        
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: ../models/enumList.yaml
    post:
      tags: [miscellaneous]
      summary: Add a medicalSpecialty
      operationId: post-medicalSpecialties
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/enumList.yaml      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data 

  /misc/medicalSpecialties/{medicalSpecialtyId}:
    get:
      summary: get a medicalSpecialty
      tags: [miscellaneous]
      operationId: get-medicalSpecialties-medicalSpecialtyId
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data 
    patch:
      tags: [miscellaneous]
      summary: update a medical specialty
      operationId: patch-medicalSpecialties-medicalSpecialtyId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/enumList.yaml      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data 

  /misc/medicalServices:
    get:
      summary: List medicalServices
      tags: [miscellaneous]
      operationId: get-medicalServices
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: ../models/enumList.yaml

    post:
      tags: [miscellaneous]
      summary: Add a medicalService
      operationId: post-medicalServices
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/enumList.yaml      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data

  /misc/medicalServices/{medicalServiceId}:
    get:
      summary: Get a medicalService
      tags: [miscellaneous]
      operationId: get-medicalServices-medicalServiceId
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data 
    patch:
      tags: [miscellaneous]
      summary: update a medicalService
      operationId: patch-medicalServices-medicalServiceId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/enumList.yaml      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data 

  /misc/genderEnum:
    get:
      summary: List genderEnums
      tags: [miscellaneous]
      operationId: get-genderEnum
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: ../models/enumList.yaml

    post:
      tags: [miscellaneous]
      summary: Add a genderEnum
      operationId: post-genderEnums
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/enumList.yaml      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data

  /misc/genderEnum/{genderEnumId}:
    get:
      summary: get a genderEnum
      tags: [miscellaneous]
      operationId: get-genderEnum-genderEnumId
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data 
    patch:
      tags: [miscellaneous]
      summary: Update a genderEnum
      operationId: patch-genderEnum-genderEnumId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/enumList.yaml      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data

  /misc/appointmentStatusEnum:
    get:
      summary: List appointmentStatusEnums
      tags: [miscellaneous]
      operationId: get-appointmentStatusEnums
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: ../models/enumList.yaml

    post:
      tags: [miscellaneous]
      summary: Add a appointmentStatusEnum
      operationId: post-appointmentStatusEnums
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/enumList.yaml      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data

  /misc/appointmentStatusEnum/{appointmentStatusEnumId}:
    get:
      summary: get a appointmentStatusEnum
      tags: [miscellaneous]
      operationId: get-appointmentStatusEnum-appointmentStatusEnumId
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data 
    patch:
      tags: [miscellaneous]
      summary: Update a appointmentStatusEnum
      operationId: patch-appointmentStatusEnum-appointmentStatusEnumId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/enumList.yaml      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data

  /misc/timeSlotEnum:
    get:
      summary: List timeSlotEnums
      tags: [miscellaneous]
      operationId: get-timeSlotEnums
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: ../models/enumList.yaml

    post:
      tags: [miscellaneous]
      summary: Add a timeSlotEnum
      operationId: post-timeSlotEnums
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/enumList.yaml      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data 

  /misc/timeSlotEnum/{timeSlotEnumId}:
    get:
      summary: Get a timeSlotEnum
      tags: [miscellaneous]
      operationId: get-timeSlotEnum-timeSlotEnumId
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data 
    patch:
      tags: [miscellaneous]
      summary: Update a timeSlotEnum
      operationId: patch-timeSlotEnum-timeSlotEnumId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/enumList.yaml      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data

  /misc/relationshipToSubscriberEnum:
    get:
      summary: List relationshipToSubscriberEnums
      tags: [miscellaneous]
      operationId: get-relationshipToSubscriberEnums
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: ../models/enumList.yaml
    post:
      tags: [miscellaneous]
      summary: Add a relationshipToSubscriberEnum
      operationId: post-relationshipToSubscriberEnums
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/enumList.yaml      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data 

  /misc/relationshipToSubscriberEnum/{relationshipToSubscriberEnumId}:
    get:
      summary: Get a relationshipToSubscriberEnum
      tags: [miscellaneous]
      operationId: get-relationshipToSubscriberEnum-relationshipToSubscriberEnumId
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data 
    patch:
      tags: [miscellaneous]
      summary: Update a relationshipToSubscriberEnum
      operationId: patch-relationshipToSubscriberEnum-relationshipToSubscriberEnumId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/enumList.yaml      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data

  /misc/accountStatusEnum:
    get:
      summary: List accountStatusEnum
      tags: [miscellaneous]
      operationId: get-accountStatusEnums
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: ../models/enumList.yaml

    post:
      tags: [miscellaneous]
      summary: Add a accountStatusEnum
      operationId: post-accountStatusEnums
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/enumList.yaml      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data 

  /misc/accountStatusEnum/{accountStatusEnumId}:
    get:
      summary: Get a accountStatusEnum
      tags: [miscellaneous]
      operationId: get-accountStatusEnum-accountStatusEnumId
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data 
    patch:
      tags: [miscellaneous]
      summary: Update a accountStatusEnum
      operationId: patch-accountStatusEnum-accountStatusEnumId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/enumList.yaml      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ../models/standardResponse.yaml
                  - type: object
                    properties:
                      data:
                        $ref: ../models/enumList.yaml
                    required:
                      - data

  /institutions:
    get:
      summary: Get all institution
      tags: [institutions]
      responses:
        '200':
          description: OK

      operationId: get-institutions
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                object:
                  type: array
                  items:
                    $ref: ../models/institution.yaml
                objectCounts:
                  type: integer
              required:
                - object
                - objectCounts
                - hasMore
    post:
      summary: Create an institution
      tags: [institutions]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../models/institution.yaml

      operationId: post-institutions
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/institution.yaml
  /institutions/{institutionId}:
    parameters:
      - schema:
          type: string
        name: institutionId
        in: path
        required: true
    patch:
      summary: Update institution
      tags: [institutions]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/institution.yaml

      operationId: patch-institutions-institutionId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/institution.yaml
    get:
      tags: [institutions]
      summary: ''
      operationId: get-institutions-institutionId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/institution.yaml


  /sms:
    get:
      tags: [sms]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:                      
                      objectArray:
                        type: array
                        items:
                          $ref: ../models/sms.yaml#/components/schemas/read

    post:
      tags: [sms]
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/sms.yaml#/components/schemas/write
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/sms.yaml#/components/schemas/read


  /sms/{smsId}:
    parameters:
      - schema:
          type: string
        name: smsId
        in: path
        required: true
    get:
      tags: [sms]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/sms.yaml#/components/schemas/read

    patch:
      tags: [sms]
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/sms.yaml#/components/schemas/update
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/sms.yaml#/components/schemas/read




components:
  schemas: {}
  examples: {}
  responses: {}
  securitySchemes:
    'Authorization: Basic ZGVtbzpwQDU1dzByZA==':
      type: http
      scheme: basic
      description: ''
  requestBodies: {}
  parameters:
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
      description: 'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 30'
    starting_after_object:
      name: starting_after_object
      in: query
      required: false
      schema:
        type: string
      description: 'A cursor for use in pagination. starting_after_object is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after_object in order to fetch the next page of the list.'
      deprecated: true     
    skip:
      name: skip
      in: query
      required: false
      schema:
        type: integer
      description: 'Skip a number of objects. Used for pagination'
    doctorId:
      name: doctorId
      in: query
      required: false
      schema:
        type: string
      description: doctor ID
    medicalCenterId:
      name: medicalCenterId
      in: query
      required: false
      schema:
        type: string
      description: medical center ID

    timeSlotId:
      name: timeSlotId
      in: query
      required: false
      style: form
      explode: true
      description: List of timeSlots to filter by
      schema:
        type: array
        items:
          type: string
      example: [afdsa34,jklj3432,j32432l]

    appointmentStatusId:
      name: appointmentStatusId
      in: query
      required: false
      style: form
      explode: true
      description: List of appointment statuses to filter by
      schema:
        type: array
        items:
          type: string
      example: [afdsa34,jklj3432,j32432l]

    dateRange:
      name: dateRange
      in: query
      required: false
      style: form
      explode: true
      description: Date range filter (start_date,end_date)
      schema:
        type: array
        items:
          type: string
          format: date
          pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
          example: "2019-05-17"
        maxItems: 2
      example: ["2022-12-22","2023-03-01"]

    fromDate:
      name: fromDate
      in: query
      required: false
      schema:
        type: string
        format: date
        pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
        example: "2019-05-17"
      description: retrieve objects associated with a date on or after this date
      deprecated: true
    toDate:
      name: toDate
      in: query
      schema:
        type: string
        format: date
        pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
        example: "2019-05-17"
      description: Retrieve objects associated with a date on or before this date
      deprecated: true
    sortBy:
      name: sortBy
      in: query
      required: false
      schema:
        type: string
        enum:
          - doctor
          - medicalCenter
      description: 'Flag to sort the objects by either doctor, medical centers or objectId. Default will be to sort by object id'
    groupBy:
      name: groupBy
      in: query
      required: false
      schema:
        type: string
        enum:
          - doctor
          - medicalCenter
      description: 'Flag to group the objects by either doctor or medical centers'
    medicalSpecialtyId:
      name: medicalSpecialtyId
      in: query
      required: false
      schema:
        type: string
      description: filter for doctor's specialty
    institutionId:
      name: institutionId
      in: query
      required: false
      schema:
        type: string
      description: institution Id
    cityId:
      name: cityId
      in: query
      required: false
      schema:
        type: string
      description: filter parameter to indicated city
    searchQuery:
      name: searchQuery
      in: query
      required: false
      schema:
        type: string
      description: filter string parameters like name and ID
